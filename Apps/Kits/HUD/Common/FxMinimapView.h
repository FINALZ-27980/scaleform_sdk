/**************************************************************************

Filename    :   FxMinimapView.h
Content     :   Minimap view specific types
Created     :   November 13, 2009
Authors     :   Prasad Silva

Copyright   :   Copyright 2011 Autodesk, Inc. All Rights reserved.

Use of this software is subject to the terms of the Autodesk license
agreement provided at the time of installation or download, or which
otherwise accompanies this software in either electronic or hard copy form.

**************************************************************************/

#ifndef INC_FxMinimapInterface_H
#define INC_FxMinimapInterface_H

#include "Kernel/SF_List.h"
#include "GFx/GFx_Player.h"

#include "FxMinimap.h"
#include "FxGameDelegate.h"


//
// The following classes are used by the minimap view. They represent
// the minimap view itself (the movieclip representing the minimap),
// minimap icon resources and icon resource caches.
//


// Forward delcaration
class FxMinimapView;

//
// Icon resource. These are expected to be generated by a corresponding 
// FxMinimapIconCache implementation. Holds reference to a movieclip on 
// stage representing a minimap entity. Includes a state variable to 
// denote view specific information (such as waypoint arrow toggled state, 
// etc.)
//
class FxMinimapIcon : public NewOverrideBase<Stat_Default_Mem>, 
                      public ListNode<FxMinimapIcon>
{
public:
    FxMinimapIcon(Value& mc, unsigned iconData, int stateData = 0) 
        : MovieClip(mc), IconData(iconData), pOwner(NULL), State(stateData) {}
    virtual ~FxMinimapIcon();

    // Accessors for the icon resource's owner (an FxMinimapEntity instance)
    FxMinimapEntity*    GetOwner() const                    { return pOwner; }
    void                RegisterOwner(FxMinimapEntity* powner);
    void                ClearOwner();

    // Accessors for the icon resource's display info
    void                GetDisplayInfo(Value::DisplayInfo* pinfo)        
    { 
        MovieClip.GetDisplayInfo(pinfo); 
    }
    void                SetDisplayInfo(const Value::DisplayInfo& info)   
    { 
        MovieClip.SetDisplayInfo(info); 
    }

    //
    // Method called by the icon cache to update the icon resource's properties
    // The FxMinimapView reference is used to get information about the physical
    // to virtual projection. The FxMinimapEntity contains the information 
    // related to the physical space. 
    //
    // The distSquared parameter contains the physical distance from the center 
    // of the map view to the entity. This distance is returned as a squared value 
    // to avoid unnecessary sqrt(). It may be greater than the squared view 
    // distance in physical space IF the query limit was greater than the view 
    // distance. The context of such a query may be icon type dependent and the 
    // icon instance may handle it appropriately. In most cases, the squared 
    // distance parameter is greater than the squared view distance to provide
    // 'sticky' functionality at the view border.
    //
    virtual void        Update(FxMinimapView* pview, FxMinimapEntity* pentity, 
                               float distSquared) = 0;

protected:
    Value                MovieClip;  // Holds a reference to the icon resource
    unsigned                    IconData;       // The data associated with the icon (subtype/type data)
    FxMinimapEntity*        pOwner;     // Entity that is represented by this resource
    int                    State;      // Icon resource specific state information
};


//
// A cache of icon resources on stage. The resources are attached to displayed 
// entities at runtime. If fading is enabled, icons representing entities out of 
// view will fade out, and after fading is complete, they will be reused. If fading 
// is disabled, they will be reused immediately.
//
// The cache maintains a 1-to-1 link between entity and icon resource. The 
// 1-to-1 link between entity and icon is required to avoid popping of icon 
// states when they are assigned to different entities already in view. This is 
// especially problematic for icons that include timeline animations (the 
// animations seem to pop on the same entity due to the reassignment). This 
// problem occurs in the naive implementation of the icon cache where depending 
// on the number of displayed entities, icons will be reassigned in LIFO order. 
//
class FxMinimapIconCache : public NewOverrideBase<Stat_Default_Mem>
{
public:
    typedef     FxMinimapEnvironment::QueryResult     QueryResult;

    //
    // Icon resource factory interface. An instance of a factory is installed 
    // with the icon cache to allow the cache to dynamically request more icon 
    // resources if there are no free resources. 
    //
    class Factory : public NewOverrideBase<Stat_Default_Mem>
    {
    public:
        Factory(unsigned genCount=10) : GenCount(genCount) {}
        virtual ~Factory() {}

        // Methods to create/destroy resources
        virtual void            GenerateBatch(List<FxMinimapIcon>* pbatch)   = 0;
        virtual void            ReleaseBatch(List<FxMinimapIcon>& batch)   = 0;

    protected:
        unsigned        GenCount;   // The number of icon resources to generate
                                // per GenerateBatch call.
    };


    //
    // The icon cache can be configured to support fading in/out of icons at 
    // the view border (useful for 'sticky' icons). The fade durations can be 
    // configured by the fadeInSecs and fadeOutSecs parameters. Their values 
    // are expected to be in seconds.
    //
    FxMinimapIconCache(Factory* pifc, bool bfadeIcons=false, float fadeInSecs=1.0f, float fadeOutSecs=1.0f)
        : pIconFactory(pifc), bFirstUpdate(true), bFadingEnabled(bfadeIcons) 
    {
        // Fade resolution is the inverse of the fade factor. It represents the
        // tick resolution used by the fade animations. For example, if 
        // fadeResolution is 1ms, then the fade animation will take 
        // 100x1ms = 100ms to complete.

        // Normalize to usecs first (tick resolution)
        FadeInFactor = 100.f / (1000000 * fadeInSecs);    
        FadeOutFactor = 100.f / (1000000 * fadeOutSecs);
    }

    ~FxMinimapIconCache() 
    {
        if (pIconFactory)
        {
            pIconFactory->ReleaseBatch(ActiveSet);
            pIconFactory->ReleaseBatch(FadeInSet);
            pIconFactory->ReleaseBatch(FadeOutSet);
            pIconFactory->ReleaseBatch(InactiveSet);
            delete pIconFactory;
        }
    }

    //
    // Icon cache update methods. A Process() call must be preceeded by 
    // BegingUpdate() and followed by EndUpdate(). The BeginUpdate()
    // method takes in the current tick count to perform fade-in/fade-out
    // animations. However regardless of the fade animation mode (enabled
    // or disabled), the Begin/EndUpdate() pair must be called around 
    // Process(). This is required to ensure that entities not in view
    // release their resources for reuse.
    //
    void                    BeginUpdate(UInt64 currentTicks);    
    void                    Process(FxMinimapView* pview, const Array<QueryResult>& entities);
    void                    EndUpdate();

private:
    //
    // Sets of icon resources. The active set contains resources that
    // are linked to entities in view. So does the fade in set, however
    // those resources will have their fade in animation ticked. The
    // inactive set contains resources that are not linked to entities
    // in view. The fade out set is similar, but the resources' fade out
    // animations will be ticked. The transition set is used to filter
    // out entities not in view.
    //
    List<FxMinimapIcon>    ActiveSet;
    List<FxMinimapIcon>    FadeInSet;
    List<FxMinimapIcon>    FadeOutSet;
    List<FxMinimapIcon>    InactiveSet;    
    List<FxMinimapIcon>    TransitionSet;

    Factory*                pIconFactory;

	// Used by the animation logic
	UInt64                  LastTicks;
	bool                    bFirstUpdate;

    // Properties that control the fade in/out animations
    float                   FadeInFactor;
    float                   FadeOutFactor;
    bool                    bFadingEnabled;

    void                    AddToFadeInSet(FxMinimapIcon* picon);
    void                    AddToFadeOutSet(FxMinimapIcon* picon);
    void                    AddToActiveSet(FxMinimapIcon* picon);
    void                    AddToInactiveSet(FxMinimapIcon* picon);    

    FxMinimapIcon*          GetNewIcon();
};


//
// The minimap view. An instance of this class represents the minimap 
// movieclip on stage. It is expected to be created by the UI controller
// when the minimap movieclip registers itself.
//
class FxMinimapView : public FxDelegateHandler
{
public:
    typedef     FxMinimapEnvironment::QueryResult     QueryResult;

    // Minimap view configuration structure
    struct Config
    {
        // Minimap movieclip
        Value                MinimapMC;   

        // Array of zoom factors (multipliers).
        // Ex: [1.0, 2.0, 4.0] will scale the terrain by the 
        // specified scale factors
        Array<float>           ZoomFactors;        

        // The zoom factor to use at startup
        // Ex: A value of 2 will use 4.0 (from the example above) as 
        // the zoom factor
        unsigned                    InitialZoomIndex;   

        // The zoom factor representing the current state of the 
        // terrain image on stage. Ex: If this value is 1, and
        // the initial zoom factor above is 2, then the zoom factor
        // will be 4.0/2.0 = 2.0
        unsigned                    CurrMapZoomIndex;   

        // The view radius (of the circular minimap) in the view
        // coordinate space
        float                   ViewRadius;

        // The offset in view coordinate space of the player icon
        // This location is used as the center of the minimap view
        PointF                 PlayerOffset;
    };

    // Stat collection structure used for testing purposes
    struct Stats
    {
        // Time spent updating the minimap resources 
        UInt64          UpdateTime;
        // Number of minimap resources updated
        unsigned            PushedObjects;

        Stats() : UpdateTime(0), PushedObjects(0) {}
    };

    FxMinimapView(const Config& config);
    virtual ~FxMinimapView();

    // FxDelegateHandler implementation
    virtual void        Accept(FxDelegateHandler::CallbackProcessor *cbreg);

    // Minimap view handlers    
    static void             ZoomMiniMapView(const FxDelegateArgs& params);
    static void             FilterFlags(const FxDelegateArgs& params);
    static void             FilterObjectives(const FxDelegateArgs& params);
    static void             FilterWaypoints(const FxDelegateArgs& params);
    static void             FilterFriendlies(const FxDelegateArgs& params);
    static void             FilterEnemies(const FxDelegateArgs& params);
    static void             LockMiniMapCompass(const FxDelegateArgs& params);


	void				RemoveIcons();
	void				RemoveIconsImpl(Value canvas, String symbol);


    // Accessors for the view state
    bool                IsCompassLocked() const     { return bCompassLocked; }
    bool                IsMinZoom() const   
    { 
        SF_ASSERT(ZoomIndex < ZoomFactors.GetSize()); 
        return ZoomIndex == 0; 
    }
    bool                IsMaxZoom() const   
    { 
        SF_ASSERT(ZoomIndex < ZoomFactors.GetSize()); 
        return ZoomIndex == (ZoomFactors.GetSize() - 1); 
    }
    unsigned                GetZoomIndex() const        { return ZoomIndex; }

    // Change player view direction display
    bool                IsShowingPlayerDir() const          { return bShowPlayerDir; }
    void                SetShowingPlayerDir(bool flag)      { bShowPlayerDir = flag; }

    // Accessors for the view properties and transforms
    const Matrix2F&    GetIconTransform() const            { return IconTransform; }
    const PointF&      GetPhysPlayerPosition() const       { return PlayerPhysPos; }
    float               GetPlayerDirection() const          { return PlayerDirection; }
    float               GetPhysViewRadius() const           { return PhysViewRadius; }
    float               GetPhysViewRadiusSquared() const    { return PhysViewRadiusSquared; }

    // Methods to manipulate the view
    void                ChangeZoomLevel(int dev);  // Param is a change in zoom factor index {-1, 1}
    void                SetFilter(FxMinimapEntity::IconType type, bool visible)
    {
        Filter[type] = visible;
    }
    void                LockCompass(bool lock);
	

    // Helper to transfer the view settings to a new instance
    void                CopySettings(FxMinimapView* psrcView)
    {
        bShowPlayerDir = psrcView->bShowPlayerDir;
        bCompassLocked = psrcView->bCompassLocked;
        for (unsigned i=0; i < FxMinimapEntity::NUM_TYPES; i++)
            Filter[i] = psrcView->Filter[i];
        ZoomIndex = psrcView->ZoomIndex;
        UpdateControls();
    }

    // Methods to update the view
    void                UpdateControls();
    virtual void        UpdateView(FxMinimapEnvironment* penv, Movie* pmovie, Stats* pstats = NULL);    
    
protected:
    // References to the minimap movieclip and several of its children
    // for faster access
    Value            MinimapMC;
	unsigned				counter;
    Value            MapMC;
    Value            CompassMC;
    Value            PlayerIconMC;

	Value			PlayerRedMC, PlayerBlueMC;
	Value 			IconsFlagMC, IconsDiamondMC, IconsWaypointMC;

    // Icon caches
    FxMinimapIconCache* IconCache[FxMinimapEntity::NUM_TYPES];

    // View filter
    bool                Filter[FxMinimapEntity::NUM_TYPES];

    // View configuration
    RectF              ViewDimensions;
    float               ViewRadius;
    Array<float>       ZoomFactors;
    unsigned                ZoomIndex;
    unsigned                NormZoomIndex;

    // View transforms and properties
    Matrix2F           IconTransform;
    PointF             PlayerPhysPos;
    float               PlayerDirection;
    float               PhysViewRadius, PhysViewRadiusSquared;
    bool                bCompassLocked;    
    bool                bShowPlayerDir;

    bool                bConvFactorsSet;
    float               Conv2PhysFactor, InvConv2PhysFactor;

    Matrix2F           ViewCenterMat;
    PointF             ViewCenter;

    bool                bForceUpdate;

    void                UpdateIcons(FxMinimapIconCache& icons, const Array<QueryResult>& entities, 
                                 const Matrix2F& txform);
    void                UpdateStickyIcons(FxMinimapIconCache& icons, const Array<QueryResult>& entities, 
                                      const Matrix2F& txform, const PointF& physPlayerPos, float physViewRadius);
};

#endif  // INC_FxMinimapInterface_H
