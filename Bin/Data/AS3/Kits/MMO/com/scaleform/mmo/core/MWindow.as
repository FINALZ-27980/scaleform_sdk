/**************************************************************************Filename    :   MWindow.asCopyright   :   Copyright 2011 Autodesk, Inc. All Rights reserved.Use of this software is subject to the terms of the Autodesk licenseagreement provided at the time of installation or download, or whichotherwise accompanies this software in either electronic or hard copy form.**************************************************************************/package com.scaleform.mmo.core {            import flash.display.DisplayObject;    import flash.display.MovieClip;    import flash.display.Sprite;    import flash.display.Stage;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.utils.getDefinitionByName;        import flash.display.Loader;    import flash.display.LoaderInfo;    import flash.net.URLRequest;    import flash.system.LoaderContext;        import scaleform.clik.constants.InvalidationType;    import scaleform.clik.core.UIComponent;    import scaleform.clik.controls.Button;    import scaleform.clik.controls.Window;    import scaleform.clik.events.ButtonEvent;    import scaleform.clik.utils.Constraints;    import scaleform.clik.constants.ConstrainMode;    import scaleform.clik.utils.Padding;    import scaleform.clik.utils.ConstrainedElement;    import scaleform.clik.utils.Constraints;        import com.scaleform.mmo.managers.WindowManager;    import com.scaleform.mmo.events.WidgetEvent;    import com.scaleform.mmo.events.WindowEvent;        public class MWindow extends Window {            // Constants:            // Public Properties:            // Protected Properties:		protected var _loader:Loader;    // UI Elements:        public var bg:MovieClip;        public var border:MovieClip;        public var widgetID:int = -1;        public var stageRef:Stage;            // Initialization:        public function MWindow() {            super();            closeBtn.visible = true;        }            // Public Methods:        public function get content():DisplayObject { return _content; }    // Protected Methods:        override protected function configUI():void {            initSize();                        constraints.addElement("hitArea", hitArea, Constraints.ALL);            constraints.addElement("background", background, Constraints.ALL);            constraints.addElement("titleBtn", titleBtn, Constraints.TOP | Constraints.LEFT | Constraints.RIGHT);            constraints.addElement("closeBtn", closeBtn, Constraints.TOP | Constraints.RIGHT);                        titleBtn.label = _title || "My Window";            			addEventListener(Event.REMOVED_FROM_STAGE, handleRemovedFromStage, false, 0, true);            closeBtn.addEventListener(ButtonEvent.CLICK, handleCloseButtonClick, false, 0, true);            titleBtn.addEventListener(MouseEvent.MOUSE_DOWN, onWindowStartDrag, false, 0, true);            titleBtn.addEventListener(MouseEvent.MOUSE_DOWN, onWindowSwapToFront, false, 0, true);        }                // MWindow will be loading external SWFS rather than Symbols.        override protected function loadSource():void {            if (_src != "") {                if (_content) {                     constraints.removeElement("content");                    removeChild(_content);                 }                                _loader = new Loader();                var url:URLRequest = new URLRequest(_src);                 var context:LoaderContext = new LoaderContext(false, null);                                _loader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleContentLoadComplete, false, 0, true);                _loader.load(url, context);            }        }                override protected function draw():void {            if (isInvalid("source")) {                loadSource();                reflowContent();            } else if (isInvalid("padding")) {                reflowContent();            }                    // Resize and update constraints            if (isInvalid(InvalidationType.SIZE)) {                if (_content) {                     constraints.update(_content.width + 16, _content.height + 46);                }            }        }                protected function handleContentLoadComplete(e:Event):void {            var loader:Loader = e.target.loader as Loader;            _content = loader.content;            addChild(_content);                        // constraints.addElement("content", _content, Constraints.ALL);            reflowContent();            stageRef.dispatchEvent( new WindowEvent(WindowEvent.WINDOW_READY, true, false, widgetID, this) );        }                override protected function reflowContent():void {            if (!_content) return;                        // var p:Padding = _contentPadding;            // var element:ConstrainedElement = constraints.getElement("content");            _content.x = 16; // element.left = p.left;            _content.y = 46; // element.top = p.top;            // element.right = p.right;            // element.bottom = p.bottom;                        invalidateSize();                        // 12 and 22 are padding on the bottom / right.            bg.scaleX = ( (_content.width + 16 + 12) / 512 );            bg.scaleY = ( (_content.height + 46 + 22) / 512 );                        border.scaleX = ( (_content.width + 16 + 12) / 512);            border.scaleY = ( (_content.height + 46 + 22) / 512);                        bg.width -= 18;            bg.height -= 46;                        // NFM: This code may be required if the content > the border's size?            // border.height += (_content.height / 512 > 1) ? -46 : 46;            // border.width += (_content.width / 512 > 1) ? -18 : 18;        }                protected function onWindowSwapToFront(e:MouseEvent):void {            var parent:Sprite = this.parent as Sprite;            // parent.swapChildrenAt( parent.getChildIndex( this ), 1 );            // var clip:Sprite = parent.removeChildAt(1);            parent.setChildIndex(this, parent.numChildren - 1);        }                protected function handleCloseButtonClick(e:ButtonEvent):void {            dispatchEvent( new WidgetEvent(WidgetEvent.CLOSE_WIDGET, true, false, widgetID) );        }				protected function handleRemovedFromStage(e:Event):void {					if (_content) {				removeChild(_content);				_content = null;			}			if (_loader) { 							_loader.unloadAndStop(true);			}					}    }}